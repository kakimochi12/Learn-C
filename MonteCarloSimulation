#include <stdio.h>
#include <stdlib.h>
#include <math.h>
#include <time.h>
#ifndef M_PI
#define M_PI 3.14159265358979323846
#endif

//Function to generate random normal values using Box-Muller
double rand_normal()
{
    double u1 = (double)rand() / RAND_MAX;
    double u2 = (double)rand() / RAND_MAX;
    return sqrt(-2.0 * log(u1)) * cos(2.0 * M_PI * u2);
}

//Here is the Monte-Carlo Simulation for European Call Option Pricing
double monte_carlo_option(int simulations, double S0, double K, double r, double sigma, double T)
{
    double sum_payoff = 0.0;
    for (int i = 0; i <= simulations; ++i)
    {
        //Brownian Motion to simlutate stock price
        double Z = rand_normal();
        double ST = S0 * exp((r - 0.5 * sigma * sigma) * T + sigma * sqrt(T) * Z);
        
        double payoff = fmax(ST - K, 0.0);
        sum_payoff += payoff;
    }
    
    //Compute Option Price
    return (sum_payoff/simulations) * exp(-r * T);    
    
    
}

int main() 
{
    srand(time(NULL));  // Seed random number generator

    // Option parameters
    double S0 = 100.0;    // Initial stock price
    double K = 100.0;     // Strike price
    double r = 0.05;      // Risk-free interest rate (5%)
    double sigma = 0.2;   // Volatility (20%)
    double T = 1.0;       // Time to maturity (1 year)
    int simulations = 10000;  // Number of Monte Carlo iterations

    // Calculate option price
    double option_price = monte_carlo_option(simulations, S0, K, r, sigma, T);

    // Output result
    printf("European Call Option Price: $%.4f\n", option_price);

    return 0;
}
